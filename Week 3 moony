import {circle,square, ribbon, blank, quarter_turn_right,red, sail, show, heart, rcross, stack, stackn, stack_frac, quarter_turn_left, beside,beside_frac} from "rune";


function moony_1 (bottom_right) {
     return stack(beside(circle, blank), beside(square, bottom_right));
}
//show(moony_1(ribbon));

function moony_2(n){
    return n === 1 
           ? circle
           : moony_1(moony_2(n-1));
}
//show(moony_2(5));

function moony(n){
    const ratio = 1/n;
    return n ===1 
           ? circle
           : stack_frac(ratio, 
                        beside_frac(ratio, circle, blank),
                        beside_frac(ratio, square, moony(n-1)));
}

//show(moony(5));

function moony_iterative(n) { 
    function iter(count, output){
        const ratio = 1/(count+1);
        return count === n 
              ? output
              : iter(count+1, 
                    stack_frac(ratio, 
                    beside_frac(ratio,circle,blank),
                    beside_frac(ratio, square, output)));
    }
     return iter(1, circle);
}
show(moony_iterative(5));


/* Big theta ,  o  = n 
    Big omega = constant 
        (big omega can be n , you can find the "the most favorable")
     Assumption : all primitive functions take the same amount of resource
                 ex) stack, beside take same amount  
                
                However , not all primitive take the same amount */ 











