
/*** ì„¤ëª…
x=== list(4)  (const x= list(4)) false
head(z) === y  (const z = list(y,3,x))

a list of numbers and tree of numbers : list(1,2,3)

** Lists library 

order : f( a, f( b, ''''''' f())) <------  way

accumulate(x-y, 0, list(1,2,3)) = 2 

*/
//1 

function my_map(f, xs) {
  return accumulate((x,y)=>pair(f(x),y),null, xs); 
}
//my_map(x => x + 1, list(1, 2, 3));


function remove_duplicates(lst) {
    return accumulate((x, y) => pair(x, filter(z => !equal(z, x), y)), null, lst);
}

remove_duplicates(list(1, 2, 3, 4, 4, 3, 2, 1, 2)); 
