//q.2 
function bubblesort_list(L) {
 const len = length(L);
 for (let i = len - 1; i >= 1; i = i - 1) {
    let lst = L;    
    for (let j = 0 ; j< i; j= j+1){
        if (head(lst)> head(tail(lst))){
            const temp = head(lst); 
            set_head(lst, head(tail(lst)));
            set_head(tail(lst), temp);
            lst = tail(lst);
            
        }
    }
}
}
function bubblesort_list_mr(L) {
    const len = length(L);
    for (let i = len - 1; i >= 1; i = i - 1) {
        let p = L; // starting pointer
        for (let j = 0; j < i; j = j + 1) {
            let curr = head(p);
            let next = head(tail(p));
            // swap clause
            if(curr > next) {
                set_head(p, next);
                set_head(tail(p), curr);
            }
            p = tail(p);
        }
    }
}

const LL = list(3, 5, 2, 4, 1);
bubblesort_list_mr(LL);
LL;
// q.3
const memo = [];

// returns e if exists, else undefined
function read(n, k) {
    if(memo[n] !== undefined) {
        if(memo[n][k] !== undefined) {
            return memo[n][k];
        }
    }
}

// writes cc(n,k) into memory
function write(n, k, res) {
    if(memo[n] === undefined) {
        memo[n] = [];
    }
    memo[n][k] = res;
}

// O(nk) time and space
function cc(amount, kinds_of_coins) {
    if(amount === 0) {
        return 1;
    }
    if(amount < 0 || kinds_of_coins === 0) {
        return 0;
    }
    
    const r = read(amount, kinds_of_coins);
    if(r !== undefined) {
        return r;
    } 
    
    const result = cc(amount, kinds_of_coins - 1) +
    cc(amount - first_denomination(kinds_of_coins),
    kinds_of_coins);
    
    write(amount, kinds_of_coins, result);
    return result;
}

function first_denomination(kinds_of_coins) {
    return kinds_of_coins === 1 ?
    5 :
    kinds_of_coins === 2 ? 10 :
    kinds_of_coins === 3 ? 20 :
    kinds_of_coins === 4 ? 50 :
    kinds_of_coins === 5 ? 100 : 0;
}

cc(500,5);
function read(n, k) {
    return mem[n] === undefined
            ? undefined
            : mem[n][k];
}
function write(n, k, value) {
    if (mem[n] === undefined) {
        mem[n] = [];
    }
    mem[n][k] = value;
}
function first_denomination(kinds_of_coins) {
    return kinds_of_coins === 1 ? 5 :
            kinds_of_coins === 2 ? 10 :
            kinds_of_coins === 3 ? 20 :
            kinds_of_coins === 4 ? 50 :
            kinds_of_coins === 5 ? 100 : 0;
}
// n is the amount in cents, and k is the number of denominations.
function mcc(n, k) {
    if (n >= 0 && k >=0 && read(n, k) !== undefined) {
        return read(n, k);
    } else {
        const result = n === 0 ? 1
                            : n < 0 || k === 0 ? 0
                            : mcc(n, k - 1) +
                              mcc(n - first_denomination(k), k);
        if (n >= 0 && k >= 0) {
            write(n, k, result);
        }
        return result;
    }
}
mcc(365, 5); // Expected result: 1730


// INCLASS
// inclass
function rotate_matrix(M) {
  function swap (i,j,m,n){
      const temp = M[i][j];
      M[i][j] = M[m][n];
      M[m][n] = temp;
  }

// transpose 
const n = array_length(M);
for (let r =0 ; r < n ; r= r+1){
    for ( let c= r+1 ; c < n ; c = c+1){
        swap (r,c,c,r);
    }
}

// reverse

const half = math_floor(n/2);
for (let r= 0; r<n ; r = r+1){
    for (let c=0; c < half ; c= c+1){
        swap(r,c,r,n-c-1);
    }
}
}